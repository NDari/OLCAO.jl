#!/usr/bin/env perl
sub printHelp
{
   print <<ENDHELP;
#Progam: appendCol
#Last Updated:  Nov. 19, 2010
#USAGE  appendCol -col \$colNum -from \$fromFile -to \$toFile [-fromhead \$fromHead]
#                 [-tohead \$toHead] [-title] [-add] [-avg] [-factor \$multFactor]
#                 [-format \$format] [-help]

#The -col parameter will accept a number indicating which column is to be
#     appended to the \$toFile.
#The -from and -to parameters specify which file the column of data is to be
#     taken from, and which file it is to be appended to.
#The -fromhead and -tohead parameters indicate how many lines of header exist in
#     each file.  In both cases, the headers will be removed.
#The -title parameter indicates that both files have a single line title of
#     space seperated labels for each column of data.  The to title will be
#     kept, and the appropriate column of the from file will be appended.
#The -add parameter will make the column being appended be added to the last
#     column in the \$toFile instead of being appended to it.
#The -avg parameter acts just like the -add parameter except that it will
#     record the average value not the sum.
#The -factor parameter will take one parameter that is a multiplication factor
#     which will be applied to the appending column.  If this switch is
#     included along with the -add switch then the column will be multiplied
#     by this value and then added to the existing column.  (This is an easy
#     way to do subtraction by using a multFactor of -1.)
#The -format option is used to define the output format of the numbers.  The
#     one parameter is a string that follows the perl convention for formatted
#     real numbers.  If this option is not given, then the default string will
#     be, "%15.7e".
#NOTE THAT THE OUTPUT OF THIS PROGRAM WILL OVERWRITE THE TOFILE.  IF YOU WANT
#     TO SAVE IT, YOU MUST COPY IT!
ENDHELP
   exit;
}

# Use necessary pramgas.
use strict;
use warnings;
use Env;
use lib "$OLCAO_BIN/perl5";
use StructureControl;

# Define global variables.
my $isTitle;
my $title;
my $toTitle;
my $fromHead;
my $toHead;
my @toHeader;
my $add;
my $avg;
my $factor;
my $format;
my $multFactor;
my $colNum;
my $numCols;
my $fromFile;
my $toFile;
my $i;
my @values;
my $dataRowTO;
my $dataRowFROM;
my @toData;
my $emptyTOFile;

# Initialize the environment.
&initEnv;

# Parse the command line parameters.
&parseCommandLine;

# Open the "TO" and "FROM" files.
&openFiles;

# Read past the headers and extract the title.
&manageText;

# Read the data in the "TO" file if it exists.
&readTOData;

# Read the data in the "FROM" file and construct a new "TO" data set.
&readFROMData;

# Write the new "TO" data set.
&writeTOData;

sub initEnv
{
   $isTitle  = 0;
   $fromHead = 0;
   $toHead   = 0;
   $add      = 0;
   $avg      = 0;
   $factor   = 0;
   $format   = "%15.7e";
   $emptyTOFile = 0;
}

sub parseCommandLine
{

   # Define local variables.
   my $number=0;

   while ($number < scalar(@ARGV))
   {
      if ($ARGV[$number] eq "-col")
         {$colNum = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-from")
         {$fromFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-to")
         {$toFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-fromhead")
         {$fromHead = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-tohead")
         {$toHead = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-title")
         {$isTitle=1;}
      elsif ($ARGV[$number] eq "-add")
         {$add=1;}
      elsif ($ARGV[$number] eq "-avg")
         {$avg=1;}
      elsif ($ARGV[$number] eq "-factor")
      {
         $factor=1;
         $multFactor = $ARGV[++$number];
      }
      elsif ($ARGV[$number] eq "-format")
         {$format = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-help")
         {&printHelp;}
      else
      {  
         print STDOUT "UNKNOWN COMMAND LINE PARAMETER $ARGV[$number]. BYE.\n";
         exit;
      }

      if ($number > scalar(@ARGV))
      {
         print STDOUT "Read past the end of the command line.\n";
         print STDOUT "Check command line parameters for missing options.\n";
         die "Aborting\n";
      }  
      else
         {$number++;}
   }
}

# Open the FROM file and TO file for reading.  Note that we have to read both
#   files first before we can append the new data.
sub openFiles
{
   open (FROM,"<$fromFile");
   open (TO,"<$toFile") || ($emptyTOFile = 1);
}

sub manageText
{
   # Define local variables.
   my $line;
   my $fromTitle;

   # If the TO file exists, then read past the header for that file.
   if ($emptyTOFile == 0)
   {
      for ($i=1;$i<=$toHead;$i++)
         {$toHeader[$i] = <TO>;}
   }

   # Read past the headers for the FROM file.
   for ($i=1;$i<=$fromHead;$i++)
      {$line=<FROM>;}

   # Extract the title if needed.
   if ($isTitle==1)
   {
      print STDOUT "Getting title\n";

      $fromTitle = <FROM>;
      chomp ($fromTitle);

      # If TO file is empty, then define an empty title.  Otherwise, read it.
      if ($emptyTOFile == 0)
      {
         $toTitle = <TO>;
         chomp ($toTitle);
      }
      else
         {$toTitle = "";}

      @values = StructureControl::prepLine("",$fromTitle,'\s+');

      $toTitle = "$toTitle"."$values[$colNum-1]";
   }
}

# Read all the TO data. It is assumed that there is a value in every column in
#   every row, no exceptions.
sub readTOData
{
   if ($emptyTOFile == 1)
   {
      $dataRowTO = 0;
      $numCols = 0;
   }
   else
   {
      @toData = <TO>;
      chomp (@toData);
      $dataRowTO = $#toData;

      @values = StructureControl::prepLine("",$toData[0],'\s+');
      $numCols = $#values+1;

      close (TO);
   }
}


# Read the FROM data and ensure that it is of the correct length to fit in the
#   TO data. Conversely, fix the toData if the FROM data extends beyond the TO
#   data. (These two scenarios would usually only occur if the data file being
#   produced contained pairs of very different X,Y data columns such as with
#   scatter plots or collections of localization index plots.)
sub readFROMData
{
   # Define local variables.
   my $col;
   my $lineFrom;
   my $lastValue;
   my $currLine;
   my $foundDatum;
   my $leadingDataTO;
   my $lastDatumTO;
   my $fromValue;
   my $char;
   my $findingChars;
   my @fromData;

   # Read the entire fromDATA file into memory and chomp off tailing newlines.
   @fromData = <FROM>;
   chomp (@fromData);

   # Store the number of FROM data lines and compare it to the toData number
   #   to make sure that all rows have data for every column.
   $dataRowFROM = $#fromData;


   # Initialize the count of the current line being operated on.
   $currLine = -1;

   # Modify the toData with the just read in fromData.
   foreach $lineFrom (@fromData)
   {
      # Increment the index of which line we are on.
      $currLine++;

      # Split the From line by spaces. (I'm not sure if the LIMIT parameter
      #   should be used or not. I can't recall why it is there just now...)
      @values = split(/\s+/,$lineFrom,$colNum+2);  #  +2 just to be safe.
      if ($values[0] eq "")
         {shift (@values);}

      # Get the specific value to be appended from the FROM data.
      $fromValue = $values[$colNum-1];

      if ($emptyTOFile == 1)
      {
         $leadingDataTO = "";
         $lastDatumTO = 0;
      }
      else
      {
         # It will be assumed that all rows have data in every column for the
         #   $add==1 and $avg==1 cases.
         if (($add == 1) || ($avg == 1))
         {
            $lastDatumTO = "";
            $foundDatum = 0;
            $findingChars = 1;
            while ($findingChars)
            {
               $char = chop($toData[$currLine]);

               if ($char ne " ")
               {
                  $lastDatumTO = $char . $lastDatumTO;
                  $foundDatum = 1;
               }
               else
               {
                  if ($foundDatum == 1)
                  {
                     while ($char = chop($toData[$currLine]))
                     {
                        if ($char ne " ")
                           {last;}
                     }
                     $toData[$currLine] = $toData[$currLine] . "$char ";
                     $findingChars = 0;
                  }
               }
            }
            $leadingDataTO = "$toData[$currLine] ";
         }
         else
         {
            if ($currLine > $dataRowTO)
            {
               $leadingDataTO = "";
               foreach $col (1..$numCols)
                  {$leadingDataTO = $leadingDataTO . "0.00000000 ";}
               $lastDatumTO = 0;   # Probably not necessary.
            }
            else
            {
               $leadingDataTO = "$toData[$currLine] ";
               $lastDatumTO = 0;   # Probably not necessary.
            }
         }
      }


      if ($add==1)
      {
         if ($factor==1)
            {$lastValue = $lastDatumTO + $fromValue * $multFactor;}
         else
            {$lastValue = $lastDatumTO + $fromValue;}
      }
      elsif($avg==1)
         {$lastValue = ($lastDatumTO + $fromValue)/2.0;}
      elsif($factor==1)
         {$lastValue = $fromValue * $multFactor;}
      else
         {$lastValue = $fromValue;}
      $toData[$currLine] = sprintf "$leadingDataTO$format",$lastValue;
   }
   close (FROM);

   # Add zeros to any rows in the read data that did not have a from data row.
   $lastValue = "0.00000000";
   foreach $currLine (($dataRowFROM+1)..$dataRowTO)
   {
      $leadingDataTO = "$toData[$currLine] ";
      $toData[$currLine] = sprintf "$leadingDataTO$format",$lastValue;
   }
}

sub writeTOData
{
#   if (($emptyTOFile == 0) && ($dataRowTO != $dataRowFROM))
#      {die "Num rows in TO file not equal to num rows in FROM file\n";}

   open (TO,">$toFile");
   if ($isTitle==1)
      {print TO "$toTitle\n";}
   for ($i=1;$i<=$toHead;$i++)
      {print TO "$toHeader[$i]"};
   for ($i=0;$i<=$dataRowFROM;$i++)
      {print TO "$toData[$i]\n";}
   close (TO);
}
