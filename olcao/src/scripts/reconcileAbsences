#!/usr/bin/env perl

sub printHelp
{
   print <<ENDHELP;
# PROGRAM: reconcileAbsences
# PURPOSE: Produce a summary of the absences for each student in the class over
#          the semester so far.
# USAGE: reconcileAbsences [-help]
#
# There are no options other than -help for this program. It is assumed that
#   all of the necessary information is recorded in the "dates" directory.
#   Inside that directory is a set of sub-directories, one for each time period
#   of interest (usually one week). Each sub-directory contains a record of the
#   expected seat assignment for students during that time period in a file
#   called "sortedOrder". Additionaly, each sub-directory should contain a file
#   that holds lists of absent students called "absences". Each line in the
#   absences file should be used for one day in the date range. (Really, the
#   absences can all be put on one single line, but it is probably easier to
#   debug and keep track of things if the information is spread across multiple
#   lines.) Each line contains a space-separate list of numbers where each
#   number is a seat number representing an absent student. The numbers in that
#   list will be compared to the numbers in the sortedOrder list so as to
#   accumulate absences.
ENDHELP
   exit(0);
}

# Use necessary modules.
use strict;
use warnings;
use Env;
use lib "$OLCAO_BIN/perl5";
use StructureControl;

# Define global variables.
my $numStudents;
my %nameAbsenceHash;

#########################
# Execute the program   #
#########################

# Initialize default variables for those global variables that can be modified
#   on the command line.
&setDefaultVars;

# Parse the command line.
&parseCLP;

# Iterate through each possible date and accumulate absences.
&accumulateAbsences;

# Print the results in an easy-to-use format.
&printResults;

#########################
# End execution         #
#########################

sub setDefaultVars
{
   # There are no command line parameters.
}

sub parseCLP
{
   # There are no command line parameters.
}

# Iterate through each date range and accumulate the absences.
sub accumulateAbsences
{
   # Define local variables.
   my $date;
   my @dates;
   my $line;
   my @values;
   my @absenceList;
   my $fullName;
   my $absentSeat;
   my %currentOrder;

   # Enter the dates directory.
   chdir ("dates");

   # Get the list of date ranges.
   @dates = `ls -1`;
   chomp (@dates);

   # Go into the first date and extract a hash where the keys are the full
   #   names and the values are the number of absences (initialized to zero).
   &initializeHash($dates[0]);

   foreach $date (@dates)
   {
      # Enter the date range directory.
      chdir ("$date");

      # Open the list of seat assignments (sorted according to the criteria for
      #   the current date range).
      open (SEATS,"<sortedOrder")
            || die "Cannot open sortedOrder for reading\n";

      # Read in the current name-to-seat relationship and store in a hash.
      while ($line = <SEATS>)
      {
         @values = StructureControl::prepLine("",$line,'\s+');
         $fullName = "$values[2]" . " $values[1]";
         $currentOrder{$values[0]} = $fullName;
      }

      # Close the seat assignments for this date.
      close (SEATS);

      # Open the record of absences and initialize the list of absences. Note
      #   that each line of this file will contain a list of seat numbers that
      #   correspond to recorded absent students for a given day.
      open (ABSENTS,"<absents") || die "Cannot open absents for reading\n";
      @absenceList = "";

      # Read each line and build up a list of absenses.
      while ($line = <ABSENTS>)
      {
         @values = StructureControl::prepLine("",$line,'\s+');
         push (@absenceList, @values);
      }

      # Now, go through all the recorded absenses and increment the number of
      #   absenses for the student with the matching seat.
      foreach $absentSeat (@absenceList)
      {
         if ($absentSeat eq "")
            {next;}
         elsif ($absentSeat > $numStudents)
            {die "There are only $numStudents in the class. $absentSeat\n";}
         $nameAbsenceHash{$currentOrder{$absentSeat}}++;
      }

      # Close the list of recorded absenses for each day.
      close (ABSENTS);

      # Return to the dates directory.
      chdir ("..");
   }

   # Return to the main directory.
   chdir ("..");

}

sub initializeHash
{
   # Define passed parameters.
   my $firstDate = $_[0];

   # Define local variables.
   my $line;
   my @values;
   my $fullName;

   # Enter the first date range sub-directory.
   chdir ("$firstDate");

   # Open the sortedOrder file to get the names.
   open (ORDER,"<sortedOrder")
         || die "Cannot open sortedOrder for reading.\n";

   # Read past the header.
   <ORDER>;

   # Read the names and initialize the count of absences for each name.
   while ($line = <ORDER>)
   {
      # Extract information from this line.
      @values = StructureControl::prepLine("",$line,'\s+');
      $fullName = "$values[2]" . " $values[1]";

      # Initialize the absences for this person to zero.
      $nameAbsenceHash{$fullName} = 0;
   }

   # Close the file handle.
   close (ORDER);

   # Return to the date directory.
   chdir ("..");

   # Compute the number of students in the class.
   $numStudents = scalar(keys(%nameAbsenceHash));
}

sub printResults
{
   # Define local variables.
   my $student;
   my $score;
   my $fileName;
   my @values;

   # Compute the participation score for each student based on the accumulated
   #   absences.
   foreach $student (keys %nameAbsenceHash)
   {
      if ($nameAbsenceHash{$student} > 5)
         {$nameAbsenceHash{$student} = 25 - $nameAbsenceHash{$student};}
      else
         {$nameAbsenceHash{$student} = 20;}
   }

   # Define the filename that the results will be output to.
   $fileName = `date --rfc-3339=sec`;
   @values = StructureControl::prepLine("",$fileName,'\s+');
   $fileName = "$values[0]" . "_$values[1]";

   # Open the file for printing.
   open (RECORD,">$fileName") || die "Cannot open $fileName for writing.\n";

   # Print the student and score in alphabetical sorted order.
   foreach $student (sort keys %nameAbsenceHash)
      {print RECORD "$student $nameAbsenceHash{$student}\n";}

   # Close the accumulated record file.
   close (RECORD);
}
